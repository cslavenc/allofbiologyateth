n <- nrow(Default)
folds <- sample(1:k, n, replace = TRUE)
cv.predProb <- rep(NA, n)
for (i in 1:k) {
## Schätze Modell mit allen Blöcken ausser Block i
mod <- glm(default ~ balance + student + income, data = Default[folds != i,], family = binomial)
## Welche Zeilen gehören im Originaldatensatz zu Block i ?
idx <- which(folds == i)
## Mache Vorhersage für Block i und schreibe das Ergebnis in die richtige Position (erste Datenzeile an erster Stelle von cv.predProb, zweite Datenzeile an zweiter Stelle etc.)
cv.predProb[idx] <- predict(mod, newdata = Default[folds == i,], type = "response")
}
cv.predDefault <- (cv.predProb > 0.5)
table(cv.predDefault, Default$default) ## Fehlerrate: (41 + 227) / 10000 = 0.0268
library(vcd) ## Paket "Visualization for Categorical Data"
source('C:/Users/made_/Desktop/Statistik 2 - HS2017/lecture material/v9.R', echo=TRUE)
m <- matrix(c(15,10, 9,11), 2,2)
m
fisher.test(m, alternative = "greater")
HairEyeColor
df <- as.data.frame(HairEyeColor)
df ## Freq: Anzahl Beobachtung mit der gleichen Merkmalsauspraegung (z.B. Black/Brown/Male kam 32 mal vor)
xtabs(Freq ~ ., data = df)
tab <- xtabs(Freq ~ Hair + Eye, data = df)
tab
mosaic(Freq ~ Eye + Hair, data = df)
chisq.test(tab)
mosaic(Freq ~ Hair + Eye, data = df, shade = TRUE)
UCBAdmissions
dfUCB <- as.data.frame(UCBAdmissions)
head(dfUCB)
tabUCB <- xtabs(Freq ~ Admit + Dept + Gender, data = dfUCB)
tabUCB <- xtabs(Freq ~ Admit + Gender, data = dfUCB)
tabUCB
ft <- fisher.test(tabUCB)
ft
ft$conf.int ## 95%-VI fuer odds fuer Ablehnung: [1.621; 2.091]
mosaic(Freq ~ Gender + Admit, data = dfUCB, shade = TRUE)
fm1 <- glm(Admit ~ Gender, weights = Freq, family = binomial, data = dfUCB)
levels(dfUCB$Admit) ## 0: Admitted, 1: Rejected (Erfolgswa. in GLM bezieht sich auf zweites Level: Reject)
levels(dfUCB$Gender) ## 'Male' ist Referenzklasse
summary(fm1)
exp(0.61035) ## Odds Ratio = odds(R|F) / odds(R|M)
confint(fm1) ## 95%-VI fuer log-odds
exp(confint(fm1)) ## 95%-VI fuer odds fuer Ablehnung: [1.625; 2.087]
fm2 <- glm(Admit ~ Gender+Dept, weights = Freq, family = binomial, data = dfUCB)
levels(dfUCB$Admit) ## 0: Admitted, 1: Rejected
summary(fm2) ## Geschlecht ist nicht mehr signifikant
confint(fm2) ## 95%-VI fuer log-odds
exp(confint(fm2)) ## 95%-VI fuer odds fuer Ablehnung: [0.77; 1.06]
source('~/.active-rstudio-document', echo=TRUE)
116 * 72 / 368
source('C:/Users/made_/Desktop/Statistik 2 - HS2017/exercise material/data9/quiz9.R', echo=TRUE)
source('C:/Users/made_/Desktop/Statistik 2 - HS2017/exercise material/data9/quiz9.R', echo=TRUE)
View(dat)
tab <- xtabs(Y ~., data=dat)
tab <- xtabs(y ~., data=dat)
source('C:/Users/made_/Desktop/Statistik 2 - HS2017/exercise material/data9/quiz9.R', echo=TRUE)
df = as.data.frame(dat)
tab <- xtabs(y ~., data=df)
View(df)
dat$A2
sum(dat$A2==G)
sum(dat$A2$G)
sum(dat$A2)
sum(dat$A2 is G)
sum(c(dat$A2$G))
sum(dat$A2)
dat$A2
source('C:/Users/made_/Desktop/Statistik 2 - HS2017/exercise material/data9/quiz9.R', echo=TRUE)
temp = 0
for (i in 1:length(dat$A2)){
if dat$A2[i] == G
temp = temp + 1
}
dat$A2
temp = 0
for (i in 1:length(dat$A2)){
if (dat$A2[i] == G){
temp = temp + 1}
}
temp = 0
for (i in 1:length(dat$A2)){
if (dat$A2[i] == dat$A2$G){
temp = temp + 1}
}
temp = 0
G = 'G'
for (i in 1:length(dat$A2)){
if (dat$A2[i] == G){
temp = temp + 1}
}
temp
view(temp)
temp
datf = cbind(c(0,0),
c(0,0))
temp = 0
G = 'G'
N = 'N'
M = 'M'
P = 'P'
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
datf[0,0] <- temp
temp <- 0 # reset temp
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == P)){
temp = temp + 1}
}
datf[0,1] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == N) & (dat$B2 == M)){
temp = temp + 1}
}
datf[1,0] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
datf[1,1] <- temp
temp <- 0
view(datf)
summary(datf)
fish = cbind(c(0,0),
c(0,0))
fish = cbind(c(0,0),
c(0,0))
temp = 0
G = 'G'
N = 'N'
M = 'M'
P = 'P'
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
fish[0,0] <- temp
temp <- 0 # reset temp
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == P)){
temp = temp + 1}
}
fish[0,1] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == N) & (dat$B2 == M)){
temp = temp + 1}
}
fish[1,0] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
fish[1,1] <- temp
temp <- 0
fish
fish = cbind(c(0,0),
c(0,0))
temp = 0
G = 'G'
N = 'N'
M = 'M'
P = 'P'
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
fish[1,1] <- temp
temp <- 0 # reset temp
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == P)){
temp = temp + 1}
}
fish[1,2] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == N) & (dat$B2 == M)){
temp = temp + 1}
}
fish[2,1] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
fish[2,2] <- temp
temp <- 0
fish
fish
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
warnings()
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == M)){
temp = temp + 1}
}
fish[1,1] <- temp
temp <- 0 # reset temp
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == P)){
temp = temp + 1}
}
fish[1,2] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == N) & (dat$B2[i] == M)){
temp = temp + 1}
}
fish[2,1] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == M)){
temp = temp + 1}
}
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2 == M)){
temp = temp + 1}
}
fish[2,2] <- temp
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == M)){
temp = temp + 1}
}
fish[2,2] <- temp
temp <- 0
fish
# Calculate: Med and cured
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == M)){
temp = temp + 1}
}
fish[1,1] <- temp
temp <- 0 # reset temp
# Calculate: Placebo and cured
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == P)){
temp = temp + 1}
}
fish[1,2] <- temp
temp <- 0
# Calculate: Med and not cured
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == N) & (dat$B2[i] == M)){
temp = temp + 1}
}
fish[2,1] <- temp
temp <- 0
# Calculate: Placebo and not cured
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == M)){
temp = temp + 1}
}
fish[2,2] <- temp
temp <- 0
fish
# Calculate: Med and cured
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == M)){
temp = temp + 1}
}
fish[1,1] <- temp
temp <- 0 # reset temp
# Calculate: Placebo and cured
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == P)){
temp = temp + 1}
}
fish[1,2] <- temp
temp <- 0
# Calculate: Med and not cured
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == N) & (dat$B2[i] == M)){
temp = temp + 1}
}
fish[2,1] <- temp
temp <- 0
# Calculate: Placebo and not cured
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == N) & (dat$B2[i] == P)){
temp = temp + 1}
}
fish[2,2] <- temp
temp <- 0
fish
length(dat$A2)
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == M)){
temp <- temp + 1}
}
fish[1,1] <- temp
fish = cbind(c(0,0),
c(0,0))
temp = 0
G = 'G'
N = 'N'
M = 'M'
P = 'P'
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == M)){
temp <- temp + 1}
}
fish[1,1] <- temp
temp <- 0 # reset temp
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == G) & (dat$B2[i] == P)){
temp <- temp + 1}
}
fish[1,2] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == N) & (dat$B2[i] == M)){
temp <- temp + 1}
}
fish[2,1] <- temp
temp <- 0
for (i in 1:length(dat$A2)){
if ((dat$A2[i] == N) & (dat$B2[i] == P)){
temp <- temp + 1}
}
fish[2,2] <- temp
temp <- 0
fish
fisher.test(fish, alternative = 'two.sided')
chitab <- cbind(c(0,0,0,0),
c(0,0,0,0),
c(0,0,0,0))
G <- 'G'
EG <- 'EG'
EN <- 'EN'
M1 <- 'M1'
M2 <- 'M2'
P <- 'P'
tt <- 0 # temporary variable
treat <- c(M1, M2, P)
cure <- c(G,EG,EN,N)
for (i in 1:length(treat)){
for (j in 1:length(cure)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == treat[i]) & (dat$B[k] == cure[J])){
tt <- tt + 1
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
}
}
chitab
chitab <- cbind(c(0,0,0,0),
c(0,0,0,0),
c(0,0,0,0))
chitab.transpose
chitab.t
t(chitab)
t(chitab) # transpose
G <- 'G'
EG <- 'EG'
EN <- 'EN'
M1 <- 'M1'
M2 <- 'M2'
P <- 'P'
tt <- 0 # temporary variable
treat <- c(M1, M2, P)
cure <- c(G,EG,EN,N)
for (i in 1:length(cure)){
for (j in 1:length(treat)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == treat[i]) & (dat$B[k] == cure[j])){
tt <- tt + 1
}
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
}
chitab
chitab <- cbind(c(0,0,0,0),
c(0,0,0,0),
c(0,0,0,0))
chitab <- t(chitab) # transpose
G <- 'G'
EG <- 'EG'
EN <- 'EN'
M1 <- 'M1'
M2 <- 'M2'
P <- 'P'
tt <- 0 # temporary variable
treat <- c(M1, M2, P)
cure <- c(G,EG,EN,N)
for (i in 1:length(cure)){
for (j in 1:length(treat)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == treat[i]) & (dat$B[k] == cure[j])){
tt <- tt + 1
}
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
}
for (i in 1:length(treat)){
for (j in 1:length(cure)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == treat[i]) & (dat$B[k] == cure[j])){
tt <- tt + 1
}
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
}
chitab
for (i in 1:length(treat)){
for (j in 1:length(cure)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == cure[i]) & (dat$B[k] == treat[j])){
tt <- tt + 1
}
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
}
for (i in 1:length(treat)){
for (j in 1:length(cure)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == cure[j]) & (dat$B[k] == treat[i])){
tt <- tt + 1
}
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
}
chitab
for (i in 1:length(treat)){
for (j in 1:length(cure)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == cure[j]) & (dat$B[k] == treat[i])){
tt <- tt + 1
}
}
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
chitab
for (i in 1:length(treat)){
for (j in 1:length(cure)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == cure[j]) & (dat$B[k] == treat[i])){
tt <- tt + 1
view(tt)
}
}
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
for (i in 1:length(treat)){
for (j in 1:length(cure)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == cure[j]) & (dat$B[k] == treat[i])){
tt <- tt + 1
show(tt)
}
}
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
chisq.test(chitab)
chitab
tt
for (i in 1:length(treat)){
for (j in 1:length(cure)){
for (k in 1:length(dat$A)){
if ((dat$A[k] == cure[j]) & (dat$B[k] == treat[i])){
tt <- tt + 1
# show(tt)
}
}
chitab[i,j] <- tt
tt <- 0 # reset the temporary variable
}
}
chitab
chisq.test(chitab)
pchisq(q=0, df=6)
tab <- xtabs(Y ~ A + B , data=df)
tab <- xtabs(y ~ A + B , data=df)
tab <- xtabs(Freq ~ A + B , data=df)
tab
chisq.test(tab)
