pairwise.t.test(gogglesData$attractiveness, gogglesData$alcohol, p.adjust.method = "bonferroni")
posthocalc <- glht(gog.fit, linfct = mcp(alcohol = "Tukey"))
summary(posthocalc)
confint(posthocalc)
# i dont feel like stopping data ----
dontstopData <- read.delim("Davey2003.dat", header = TRUE)
dontstopData$Mood <- factor(dontstopData$Mood, levels = c(1:3),
labels = c("negative", "positive", "neutral"))
dontstopData$Stop_Rule <- factor(dontstopData$Stop_Rule, levels = c(1:2),
labels = c("as many as can", "feel like continuing"))
# fit model
dontstopModel <- aov(Checks ~ Mood*Stop_Rule, data = dontstopData)
summary(dontstopModel)
bar <- ggplot(dontstopData, aes(Mood, Checks, fill = Stop_Rule))
bar + stat_summary(fun.y = mean, geom = "bar", position="dodge") + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", position=position_dodge(width=0.90), width = 0.2) + labs(x = "Mood Induction", y = "Mean Quantity of Items Checked", fill = "Stop Rule")
# additional exercises ----
# music data
musicData <- read.delim("fugazi.dat", header = TRUE)
musicData$music <- factor(musicData$music, levels = c(1:3),
labels = c("Fugazi", "ABBA", "people who are old and bold"))
musicData$age   <- factor(musicData$age, levels = c(1:2),
labels = c("young", "old"))
# fit model
musicModel <- aov(liking ~ music*age, data = musicData)
summary(musicModel)
summary.lm(musicModel)
# chickflick data
chick.dat <- read.delim("ChickFlick.dat", header = TRUE)
chick.fit <- aov(arousal ~ gender*film, data = chick.dat)
summary(chick.fit)
summary.lm(chick.fit)
# screaming data
scream.dat <- read.delim("Escape From Inside.dat", header = TRUE)
scream.dat$Song_Type  <- factor(scream.dat$Song_Type, levels = c(0:1),
labels = c("symphony", "flies"))
scream.dat$Songwriter <- factor(scream.dat$Songwriter, levels = c(0:1),
labels = c("dude who wrote book", "Malcolm"))
# fit model
scream.fit <- aov(Screams ~ Songwriter*Song_Type, data = scream.dat)
summary(scream.fit)
summary.lm(scream.fit)
dummy.coef(scream.fit)
# Wii data
wii.dat <- read.delim("Wii.dat", header = TRUE)
wii.fit <- aov(injury ~ wii*stretch*athlete, data = wii.dat)
summary(wii.fit)  # prevention programme was a good idea: stretching helps prevent injuries
summary.lm(wii.fit)
dummy.coef(wii.fit)
# BONUS Section: Mixed models ----
install.packages("ez")
library(ez)
library(nlme)
library(lme4)
library(lmerTest)
?subset
# speeddating data ----
speeddatingData <- read.delim("LooksOrPersonality.dat", header = TRUE)
# RESTRUCTURE
speeddatingData <- melt(speeddatingData, id = c("participant", "gender"),
measured = c("att_high", "av_high", "ug_high",
"att_some", "av_some", "ug_some",
"att_none", "av_none", "ug_none"))
names(speeddatingData) <- c("participant", "gender", "groups", "rating")
speeddatingData$personality <- gl(3, 60, labels = c("Charismatic", "Average", "idiot"))
speeddatingData$looks <- gl(3, 20, 180, labels = c("Attractive", "Average", "Ugly"))
# set contrast and fit mixed model
# build models for comparison later
# contrast for looks
contrasts(speeddatingData$looks) <- cbind(c(1, -1, 0),
c(1, 0, -1),
c(0, 1, -1))
# contrast for personality
contrasts(speeddatingData$personality) <- cbind(c(1, -1, 0),
c(1, 0, -1),
c(0, 1, -1))
speed.base <- lme(rating ~ 1, random = ~1|participant/looks/personality, data = speeddatingData,
method = "ML")
speed.test <- lme(rating ~ looks, random = ~1|participant/looks/personality, data = speeddatingData,
method = "ML")
# anova(speed.base, speed.test)
speed.1 <- update(speed.base, .~. + looks)
speed.2 <- update(speed.1, .~. + personality)
speed.3 <- update(speed.2, .~. + gender)
speed.4 <- update(speed.3, .~. + looks:personality)
speed.5 <- update(speed.4, .~. + looks:gender)
speed.6 <- update(speed.5, .~. + gender:personality)
speed.7 <- update(speed.6, .~. + looks:gender:personality)
anova(speed.base, speed.1, speed.2, speed.3, speed.4, speed.5, speed.6, speed.7)
speed.all <- lme(rating ~., random = ~1|participant/looks/personality, data = speeddatingData,
method = "ML")
summary.lm(speed.all)
# relationship data ----
relationshipData <- read.delim("Schutzwohl(2008).dat", header = TRUE)
# factorize and restructure
relationshipData$Gender <- factor(relationshipData$Gender, levels = c(1:2),
labels = c("male", "female"))
relationshipData <- melt(relationshipData,
id = c("Participant", "Gender", "Relationship",
"Distractor_Colour", "Target_Neutral", "Target_Emotional",
"Target_Sexual", "Age"),
measured = c("Distracter_Neutral", "Distracter_Emotional",
"Distracter_Sexual"))
relationshipData <- melt(relationshipData,
id = c("Participant", "Relationship", "Gender", "Age",
"variable", "value", "Distractor_Colour"),
measured = c("Target_Neutral", "Target_Emotional",
"Target_Sexual"))
names(relationshipData) <- c("Participant", "Relationship", "Gender", "Age",
"Distractor_type", "Distractor_value", "Distractor_colour",
"Target_type", "Target_value")
menData <- relationshipData[order(relationshipData$Gender),]
menData <- subset(menData, Gender == "male")
femaleData <- relationshipData[order(relationshipData$Gender),]
femaleData <- subset(femaleData, Gender == "female")
# fit three-way ANOVA for genders individually
men.fit    <- aov(Target_value ~ Relationship*Age*Distractor_value, data = menData)
female.fit <- aov(Target_value ~ Relationship*Age*Distractor_value, data = femaleData)
men.fit    <- lme(Target_value ~ Relationship*Age*Distractor_value, random = ~1|Participant ,data = menData,
method = "ML")
female.fit <- lme(Target_value ~ Relationship*Age*Distractor_value, random = ~1|Participant ,data = femaleData,
method = "ML")
# mixed attitude data ----
attitudeData <- read.delim("MixedAttitude.dat", header = TRUE)
attitudeData <- melt(attitudeData, id = c("Participant", "gender"),
measured = c("beerpos", "beerneg", "beerneut",
"waterpos", "waterneg", "waterneut",
"winepos", "waterneg", "waterneut"))
attitudeData$drinks  <- gl(3, 60, labels = c("Beer", "Wine", "Water"))
attitudeData$imagery <- gl(3, 20, labels = c("positive", "negative", "neutral"))
# fit mixed model using ezANOVA and lme functions
attitude.fit <- ezANOVA(data = attitudeData, wid = Participant, dv = value, between = gender,
within = .("drinks", "imagery"), detailed = TRUE)
attitude.lme <- lme(value ~ drinks*imagery*gender, random = ~1|Participant/drinks/imagery,
method = "ML", data = attitudeData)
# text messages data ----
msgData <- read.delim("TextMessages.dat", header = TRUE)
msgData$participant <- c(1:50)
msgData <- melt(msgData, id = c("participant", "Group"),
measured = c("Baseline", "Six_months"))
names(msgData) <- c("Participant", "Group", "Time", "Score")
msg.fit <- ezANOVA(data = msgData, dv = Score, within = Time, between = Group,
wid = Participant, detailed = TRUE)
# big brother data ----
bigbroData <- read.delim("BigBrother.dat", header = TRUE)
bigbroData$bb <- factor(bigbroData$bb, levels = c(0:1), labels = c("Ctrl", "Got in"))
bigbroData <- melt(bigbroData, id = c("Participant", "bb"),
measured = c("time1", "time2"))
names(bigbroData) <- c("Participant", "bb", "time", "score")
bigbro.fit <- ezANOVA(data = bigbroData, dv = score, within = time, between = bb,
wid = Participant, detailed = TRUE)
guanData <- read.delim("Guanaco.txt", header = T, sep = " ")
View(guanData)
guanData <- read.delim("Guanaco.txt", header = T)
by(guanData$NonMatingSeason, guanData$MatingSeason, FUN = describe)
by(guanData, FUN = describe)
by(guanData$NonMatingSeason, FUN = describe)
by(guanData$NonMatingSeason, guanData$MaleID, FUN = describe)
mean(guanData$NonMatingSeason)
sd(guanData$NonMatingSeason)
describe(guanData$NonMatingSeason)
describe(guanData$MatingSeason)
plot(guanData)
hist(guanData$NonMatingSeason)
hist(guanData$MatingSeason)
fm1 <- t.test(guanData$MatingSeason, guanData$NonMatingSeason,
data = guanData)
summary(fm1)
fm1
summary(fm1)
fm1$statistic
confints <- fm1$conf.int
fm1params   <- fm1$parameter
fm1params
r <- effectSize(tstat, fm1params)
effectSize <- function(t, df) {
r <- sqrt(t^2/(t^2 + df))
r
}
r <- effectSize(tstat, fm1params)
fm1params   <- fm1$parameter
tstat       <- fm1$statistic
pval        <- fm1$p.value
confints    <- fm1$conf.int
r <- effectSize(tstat, fm1params)
r
r
tstat
fm1
r
describe(guanData$NonMatingSeason)
describe(guanData$MatingSeason)
plot(fm1)
plot(fm1)
fm1$resids
fm1$residuals
fm1$resid
leveneTest(guanData$MatingSeason, guanData$NonMatingSeason, center = mean)
leveneTest(guanData$MatingSeason, guanData$NonMatingSeason, center = "mean")
fm1 <- t.test(guanData$MatingSeason, guanData$NonMatingSeason,
data = guanData, alternative = "two.tailed")  # not significant p = 0.06
fm1 <- t.test(guanData$MatingSeason, guanData$NonMatingSeason,
data = guanData, alternative = "sided")  # not significant p = 0.06
fm1 <- t.test(guanData$MatingSeason, guanData$NonMatingSeason,
data = guanData, alternative = "two.sided")  # not significant p = 0.06
summary(fm1)
fm1
fm1estiamte
fm1estimate <- fm1$estimate
fm1estimate
se(fm1estimate)
library(compute.es)
std.error(fm1estimate)
library(misc)
install.packages("misc")
fm1
MatingSE<- sd(guanData$MatingSeason)/sqrt(sum(!is.na(guanData$MatingSeason)))
NonmatingSE <- sd(guanData$NonMatingSeason)/sqrt(sum(!is.na(guanData$NonMatingSeason)))
MatingSE
NonmatingSE
tstat
0.1905128r
r
fm1
fm1$parameter
fm1$statistic
pval
leveneTest(guanData$MatingSeason, guanData$NonMatingSeason, center = "median")  # significant
bootTtest <- function(formula, data, i) {
d <- data[i,]
fit <- t.test(guanData$MatingSeason, guanData$NonMatingSeason,
data = guanData, alternative = "two.sided", data = d)
return(coef(fit))
}
booted <- boot(statistic = bootTtest, data = guanData, R = 2000)
d <- data
bootTtest <- function(formula, data, i) {
d <- data
fit <- t.test(guanData$MatingSeason, guanData$NonMatingSeason,
data = guanData, alternative = "two.sided", data = d)
return(coef(fit))
}
booted <- boot(statistic = bootTtest, data = guanData, R = 2000)
booted
booted.ci
boot.ci(booted, type = "bca", index = 1)
tickData <- read.delim("Tick.dat", header = T)
View(tickData)
describe(tickData$Temp)
describe(tickData$Hours)
plot(tickData)
hist(tickData$temp)
hist(tickData$Hours)
hist(tickData$temp)
hist(tickData$Temp)
par(mfrow = c(1,2))
hist(tickData$Temp)
hist(tickData$Hours)
boxplots(guanData)
boxplot(guanData)
boxplot(guanData$NonMatingSeason, guanData$MatingSeason)
boxplot(guanData$NonMatingSeason, guanData$MatingSeason)
boxplot(guanData$NonMatingSeason, guanData$MatingSeason)
par(mfrow = c(1,1))
boxplot(guanData$NonMatingSeason, guanData$MatingSeason)
par(mfrow = c(1,2))
boxplot(guanData$NonMatingSeason, guanData$MatingSeason)
boxplot(guanData$MatingSeason)
par(mfrow = c(1,1))
boxplot(guanData$NonMatingSeason, guanData$MatingSeason)
boxplot(tickData)
boxplot(tickData$Temp, tickData$Hours)
leveneTest(guanData, center = "mean")
leveneTest(tickData, center = "mean")
leveneTest(tickData$Temp, center = "mean")
leveneTest(tickData$Temp, tickData$Bites, center = "mean")
leveneTest(tickData$Hours, tickData$Bites, center = "mean")
fit.1 <- aov(Hours ~ Bites, data = tickData)
fit.1
summary(fit-.1)
summary(fit.1)
fit <- aov(Temp ~ Bites*Hours, data = tickData)
fit.1 <- aov(Temp ~ Bites*Hours, data = tickData)
summary(fit.1)
fit.up1 <- aov(Temp ~ 1, data = tickData)
fit.1 <- aov(Temp ~ Hours*Bites, data = tickData)  # bites and hours significant, not their interaction
fit.up1 <- aov(Temp ~ 1, data = tickData)
fit.up2 <- update(fit.up1, .~. + Hours)
fit.up1 <- aov(Temp ~ 1, data = tickData)
fit.up2 <- update(fit.up1, .~. + Hours)
fit.up3 <- update(fit.up2, .~. + Bites)
fit.up4 <- update(fit.up3, .~. + Hours:Bites)
anova(fit.up1, fit.up2, fit.up3, fit.up4)
resids <- resid(fit.final)
form1 <- formula(Temp ~ Hours + Bites)
fit.final <- aov(form1, data = tickData)
resids <- resid(fit.final)
fitvals<- fitted(fit.final)
plot(fit.final)
qqplot(resids)
qqplot(resids, fit.final)
contrasts(tickData$Bites) <- <- contr.helmert(3)
contrasts(tickData$Bites) <- contr.helmert(3)
tickData$Bites <- factor(tickData$Bites)
contrasts(tickData$Bites) <- contr.helmert(3)
fit.cov <- aov(Hours ~ Bites, data = tickData)
summary(fit.cov)  # n.s.
fit.1 <- aov(Temp ~ Hours*Bites, data = tickData)  # bites and hours significant, not their interaction
summary(fit.1)
fit.up1 <- aov(Temp ~ 1, data = tickData)
fit.up2 <- update(fit.up1, .~. + Hours)
fit.up3 <- update(fit.up2, .~. + Bites)
fit.up4 <- update(fit.up3, .~. + Hours:Bites)
anova(fit.up1, fit.up2, fit.up3, fit.up4)  # clearly, fit.up3 is best
form1 <- formula(Temp ~ Hours + Bites)
fit.final <- aov(form1, data = tickData)
resids <- resid(fit.final)
fitvals<- fitted(fit.final)
plot(fit.final)  # errors normally distributed, variance constant and homogeneous
Anova(fit.cov, type = "III")
tickcov <- ggplot(tickData, aes(Bites, Hours)) + geom_point(size = 3)
tickstat <- geom_smooth(method = "lm", alpha = 0.4)
tickcov + tickstat
ancovpost <- glht(fit.cov, linfct = mcp(dose = "Tukey"))
ancovpost <- glht(fit.cov, linfct = mcp(dose = "Tukey"))
library(multcomp)  # for glht()
ancovpost <- glht(fit.cov, linfct = mcp(dose = "Tukey"))
ancovpost <- glht(fit.cov, linfct = mcp(Hoirs = "Tukey"))
ancovpost <- glht(fit.cov, linfct = mcp(Hours = "Tukey"))
tickData$Hours <- factor(tickData$Hours)
ancovpost <- glht(fit.cov, linfct = mcp(Hours = "Tukey"))
ancovpost <- glht(fit.cov, linfct = mcp(Bites = "Tukey"))
summary(ancovpost)
confint(ancovpost)
fit.final
summary(fit.final)
fit.reg <- lm(form1, data = tickData)
fit.reg
summary(fit.reg)
summary.lm(fit.reg)
clock <- read.delim("CloakofInvisibility.dat", header = TRUE)
View(clock)
clock$cloak <- factor(clock$cloak, levels = c(1:2), labels = c("No Clock", "Clock"))
clock.1 <- aov(mischief1 ~ cloak, data = clock)  # covariate is n.s.
tickData$Bites <- factor(tickData$Bites, levels = c(0:2),
labels = ("No Bites", "less than 5 bites", "more than 5 bites"))
tickData$Bites <- factor(tickData$Bites, levels = c(0:2),
labels = (c("No Bites", "less than 5 bites", "more than 5 bites")))
contrasts(tickData$Bites) <- contr.helmert(3)
fit.cov <- aov(Hours ~ Bites, data = tickData)
summary(fit.cov)  # n.s.
Anova(fit.cov, type = "III")
tickcov <- ggplot(tickData, aes(Bites, Hours)) + geom_point(size = 3)
tickstat <- geom_smooth(method = "lm", alpha = 0.4)
tickcov + tickstat
ancovpost <- glht(fit.cov, linfct = mcp(Bites = "Tukey"))
summary(ancovpost)
confint(ancovpost)
ancovpost <- glht(fit.cov, linfct = mcp(Bites = "Tukey"))
summary(ancovpost)
confint(ancovpost)
tickcov + tickstat
fit.1 <- aov(Temp ~ Hours*Bites, data = tickData)  # bites and hours significant, not their interaction
fit.up1 <- aov(Temp ~ 1, data = tickData)
fit.up2 <- update(fit.up1, .~. + Hours)
fit.up3 <- update(fit.up2, .~. + Bites)
fit.up4 <- update(fit.up3, .~. + Hours:Bites)
anova(fit.up1, fit.up2, fit.up3, fit.up4)  # clearly, fit.up3 is best
form1 <- formula(Temp ~ Hours + Bites)
fit.final <- aov(form1, data = tickData)
resids <- resid(fit.final)
fitvals<- fitted(fit.final)
plot(fit.final)  # errors normally distributed, variance constant and homogeneous
fit.reg <- lm(form1, data = tickData)
summary(fit.reg)
fit.final
summary(fit.final)
newData <- tickData$Bites["No Bites"]
newData <- tickData$Bites == "No Bites"
?subset
newData <- subset(tickData, Bites == "No Bites")
View(newData)
nobitesData <- subset(tickData, Bites == "No Bites")
fit.reg <- lm(form1, data = nobitesData)
fit.reg
fit.nobites <- lm(form1, data = nobitesData)
fit.nobites <- lm(Temp ~ Hours, data = nobitesData)
fit.nobites
summary.lm(fit.final)
fm1 <- t.test(guanData$MatingSeason, guanData$NonMatingSeason, paired = T,
data = guanData, alternative = "two.sided")  # not significant p = 0.063
summary(fm1)
fm1
fm1estimate <- fm1$estimate   # means
fm1params   <- fm1$parameter  # df
tstat       <- fm1$statistic  # t
pval        <- fm1$p.value    # p value
confints    <- fm1$conf.int
r <- effectSize(tstat, fm1params)
MatingSE<- sd(guanData$MatingSeason)/sqrt(sum(!is.na(guanData$MatingSeason)))
NonmatingSE <- sd(guanData$NonMatingSeason)/sqrt(sum(!is.na(guanData$NonMatingSeason)))
tstat
fm1$
parameter
parameterr
r
MatingSE
NonmatingSE
confints
fm1estimate
2.718 + 0.536
summary.beta(fit.final)
lm.beta(fit.final)
summary(fit.final)
fit.reg <- lm(Temp ~ Hours + Bites, data = tickData)
summary(fit.reg)
tickData <- read.delim("Tick.dat", header = T)
describe(tickData$Temp)
describe(tickData$Hours)
plot(tickData)  # scatter plot
par(mfrow = c(1,2))
hist(tickData$Temp, main = "Histogram of Temperature")
hist(tickData$Hours, main = "Histogram of Hours")
boxplot(tickData$Temp, tickData$Hours)
leveneTest(tickData$Temp, tickData$Bites, center = "mean")  # n.s.
leveneTest(tickData$Hours, tickData$Bites, center = "mean") # n.s.
tickData$Bites <- factor(tickData$Bites, levels = c(0:2),
labels = (c("No Bites", "less than 5 bites", "more than 5 bites")))
contrasts(tickData$Bites) <- contr.helmert(3)
fit.cov <- aov(Hours ~ Bites, data = tickData)
summary(fit.cov)  # n.s.
Anova(fit.cov, type = "III")
tickcov <- ggplot(tickData, aes(Bites, Hours)) + geom_point(size = 3)
tickstat <- geom_smooth(method = "lm", alpha = 0.4)
tickcov + tickstat
fit.1 <- aov(Temp ~ Hours*Bites, data = tickData)  # bites and hours significant, not their interaction
fit.up1 <- aov(Temp ~ 1, data = tickData)
fit.up2 <- update(fit.up1, .~. + Hours)
fit.up3 <- update(fit.up2, .~. + Bites)
fit.up4 <- update(fit.up3, .~. + Hours:Bites)
anova(fit.up1, fit.up2, fit.up3, fit.up4)  # clearly, fit.up3 is best
form1 <- formula(Temp ~ Hours + Bites)
fit.final <- aov(form1, data = tickData)
resids <- resid(fit.final)
fitvals<- fitted(fit.final)
plot(fit.final)  # errors not normally distributed, variance constant and homogeneous
fit.reg <- lm(Temp ~ Hours + Bites, data = tickData)
summary(fit.reg)
fit.reg
36.5081 + 0.2633*2
plot(fit.final)  # errors not normally distributed, variance constant and homogeneous
plot(fit.final)  # errors approx. normally distributed, variance constant and homogeneous
summary(fit.final)
anova(fit.up1, fit.up2, fit.up3, fit.up4)  # clearly, fit.up3 is best
fit.1 <- aov(Temp ~ Hours*Bites, data = tickData)  # bites and hours significant, not their interaction
fit.1
fit.final
summary(fit.final)
body_temp = 36.5081 + 0.2633*2
effectSize <- function(t, df) {
r <- sqrt(t^2/(t^2 + df))
return(r)
}
r <- effectSize(tstat, fm1params)
r
boxplot(guanData$NonMatingSeason, guanData$MatingSeason)
hist(resids)
summary.lm(fit.final)
fit.step <- step(fit.1, direction = "backward", trace = F)
anova(fit.step)
line   <- ggplot(tickData, aes(Bites, Temp))
errbar <- stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2)
point  <- stat_summary(fun.y = mean, geom = "point", size = 3)
line + errbar + point + stat_summary(fun.y = mean, geom = "line", size = 1, aes(group=1))
line2  <- stat_summary(fun.y = mean, geom = "line", size = 1, aes(group=1))
line + errbar + point + line2
line2  <- stat_summary(fun.y = mean, geom = "line", size = 1)
line + errbar + point + line2
library(ggplot2)
line   <- ggplot(tickData, aes(Bites, Temp))
errbar <- stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2)
point  <- stat_summary(fun.y = mean, geom = "point", size = 3)
line2  <- stat_summary(fun.y = mean, geom = "line", size = 1)
line + errbar + point + line2
line   <- ggplot(tickData, aes(Bites, Temp))
errbar <- stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2)
point  <- stat_summary(fun.y = mean, geom = "point", size = 3)
line2  <- stat_summary(fun.y = mean, geom = "line", size = 1, aes(group=1))
line + errbar + point + line2
adverts<-c(5,4,4,6,8)
packets<-c(8,9,10,13,15)
advertData<-data.frame(adverts, packets)
scatter <- ggplot(advertData, aes(adverts, packets)) + geom_point()
scatter
cor(guanData)
cor.test(guanData$NonMatingSeason, guanData$MatingSeason, method = "pearson")
cor.test(guanData$NonMatingSeason, guanData$MatingSeason, method = "spearman")
cor.test(guanData$NonMatingSeason, guanData$MatingSeason, method = "pearson")
fit.final
summary(fit.final)
vif(fit.final)
library(outliers)
outlierTest(fit.final)
outliers(fit.final)
outlier(fit.final)
outlierTest(fit.final)
cookdist <- cooks.distance(fit.final)
betas    <- dfbeta(fit.final)
covrat   <- covratio(fit.final)
betas
covrat
beas
cookdist
